{
	"info": {
		"_postman_id": "ffb5ce2b-e69a-4e5f-8632-a2631a738db2",
		"name": "PSnF_Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861454",
		"_collection_link": "https://martian-eclipse-381947.postman.co/workspace/VCNG-automation~60598d72-d6bf-4ec8-9ccc-e86c28b839db/collection/22861454-ffb5ce2b-e69a-4e5f-8632-a2631a738db2?action=share&creator=22861454&source=collection_link"
	},
	"item": [
		{
			"name": "Get User with empty ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"siteId property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with empty ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Site with id 0 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with invalid ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=0",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with Empty site ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with empty sortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with empty sortAsc\", function () {\r",
							"    for (let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with invalid sortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with invalid sortAsc\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=tru",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "tru"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sortAsc true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sortAsc false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with letter offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with letter offset\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with negative Value offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with negative Value offset\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=-1",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with non Numeric Value offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message for offset negative Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with offset Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with non Numberic Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"limit property is not numeric: b\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with non Numberic Limit\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=0&limit=b",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "b"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with negative Value Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"limit property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with negative Value Limit\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&offset=1&limit=-3&",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "-3"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message with null ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with Limit Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort lastLoginTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort lastLoginLocation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort roles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. roles column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort roles\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=roles&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "roles"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort enabled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=enabled&sortAsc=true&limit=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "enabled"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter starts with Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Test%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Test%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter starts with Empty Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter starts with Empty Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter starts with unexist Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter starts with unexist Value\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter ends with l",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22l%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22l%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter ends with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter ends with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter ends with empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter ends with empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter contains est",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22est%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22est%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter contains xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter contains xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter equal Miguel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=name&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22miguel%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22miguel%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter equal xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter equal xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort Name Filter equal Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort Name Filter ends with empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-1%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter starts with miguelmora",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=emailAddress&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22miguelmora%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22miguelmora%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter starts with invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter starts with invalid\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter starts with Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter starts with Empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter ends with com",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22com%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22com%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter ends with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter ends with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter ends with Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter ends with Empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter Contains with honeywell",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22honeywell%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22honeywell%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter contains with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter contains with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter contains with Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter contains with Empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D\n",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter Equal with miguelmora.hernandez@honeywell.com",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=emailAddress&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22miguelmora.hernandez@honeywell.com%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22miguelmora.hernandez@honeywell.com%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter Equal with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter Equal with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort email Filter Equal empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort email Filter Equal empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=emailAddress&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "emailAddress"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-2%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 9 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message with null ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within with 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 0 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLoginTime Filter within with 0\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter within empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 2. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLoginTime Filter within empty\", function () {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 2. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLoginTime Filter no within with empty\", function () {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 9 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message with null ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no within with 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 0 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message with null ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no Value 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 1 for operand type: 2. It should be no.value. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message with null ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLoginTime Filter no Value 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 2 for operand type: 2. It should be no.value. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLoginTime Filter no Value 2\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginTime&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-3%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation Starts with 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation starts with Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation starts with Invalid\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation starts with Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation starts with Empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation ends with 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation ends with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation ends with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation ends with empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation ends with empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation contains 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation contains xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation contains xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation contains empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort lastLocation contains empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation equal 127.0.0.6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22127.0.0.6%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22127.0.0.6%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation equal xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation equal xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  lastLocation equal empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  lastLocation equal empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=lastLoginLocation&sortAsc=false&limit=2&offset=1&submittedFilterCriterion=%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "lastLoginLocation"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-4%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes starts with These",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22These%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22These%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes starts with Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes starts with Invalid\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=name&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Invalid%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes starts empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes starts empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes ends with test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22test%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22test%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes ends xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes ends xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes contains empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort notes contains empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes contains are",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22are%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22are%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes contains xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes contains xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes contains empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes contains empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes equal with These are some notes to test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=24&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22These are some notes to test%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "24"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22These are some notes to test%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes equal with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes equal with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User with sort  notes equal empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Get User with sort  notes equal empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/data?siteId=-1&sortColumn=notes&sortAsc=false&limit=2&offset=0&submittedFilterCriterion=%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "false"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-5%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		}
	]
}