{
	"info": {
		"_postman_id": "3fa222b3-503a-4479-8c42-35fb4d458b82",
		"name": "PSnF_Device_Profiles",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861454",
		"_collection_link": "https://martian-eclipse-381947.postman.co/workspace/VCNG-automation~60598d72-d6bf-4ec8-9ccc-e86c28b839db/collection/22861454-3fa222b3-503a-4479-8c42-35fb4d458b82?action=share&creator=22861454&source=collection_link"
	},
	"item": [
		{
			"name": "getData-validsiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidSiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var siteId = pm.collectionVariables.get(\"siteId\")\r",
							"const errorMessage = \"siteId property is not numeric: \" + siteId\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=invalid&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "invalid"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-SiteIdNoFound",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var siteId = pm.collectionVariables.get(\"siteNotFound\")\r",
							"const errorMessage = \"Site with id \" + siteId + \" cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId={{siteNotFound}}&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "{{siteNotFound}}"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-missingSiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"siteId property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "{{site}}",
							"disabled": true
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validsortColumnName-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validsortColumnName-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=name&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validsortColumnName-and-sortAscmissing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=name",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validsortColumnName-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=name&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidsortColumn-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. Invalid column does not exist for entity name: profiles.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=Invalid&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidsortColumn-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. Invalid column does not exist for entity name: profiles.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=Invalid&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidsortColumn-and-sortAscMissing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortColumn. Invalid column does not exist for entity name: profiles.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=Invalid",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid"
						},
						{
							"key": "sortAsc",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidsortColumn-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\",\r",
							"    \"Invalid value for parameter sortColumn. Invalid column does not exist for entity name: profiles.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=Invalid&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-missingsortColumn-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-missingsortColumn-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-missingsortColumn-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-missingsortColumn-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "Invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnffiFile-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. ffiFile column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=ffiFile&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "ffiFile"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnffiFile-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. ffiFile column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=ffiFile&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "ffiFile"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnffiFile-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortColumn. ffiFile column sort type is NoSort and does not support sorting.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=ffiFile",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "ffiFile"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnffiFile-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\",\r",
							"    \"Invalid value for parameter sortColumn. ffiFile column sort type is NoSort and does not support sorting.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=ffiFile&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "ffiFile"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSupportedTasks-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTasks&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTasks"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSupportedTasks-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTasks&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTasks"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSupportedTasks-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTasks&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTasks"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSupportedTasks-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTasks",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTasks"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumndateCreated-and-sortArcTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=dateCreated&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "dateCreated"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumndateCreated-and-sortArcFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=dateCreated&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "dateCreated"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumndateCreated-and-sortArcNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=dateCreated&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "dateCreated"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumndateCreated-and-missingsortArc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=dateCreated",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "dateCreated"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnsupportedTaskVersions-and-sortArcTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTaskVersions&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTaskVersions"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnsupportedTaskVersions-and-sortArcFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTaskVersions&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTaskVersions"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnsupportedTaskVersions-and-sortArcNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTaskVersions&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTaskVersions"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnsupportedTaskVersions-and-missingsortArc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=supportedTaskVersions",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "supportedTaskVersions"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSite-and-sortArcTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=site&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSite-and-sortArcFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=site&sortAsc=false",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSite-and-sortArcNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=site&sortAsc=",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validSortColumnSite-and-missingsortArc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=site",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validoffset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&sortColumn=site&sortAsc=true&offset=5",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidoffset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var offSet = pm.collectionVariables.get(\"offSetInvalid\")\r",
							"const errorMessage = \"offset property is not numeric: \" + offSet\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&offset=invalid",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true",
							"disabled": true
						},
						{
							"key": "offset",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-negativeOffSet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&offset=-1",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-validLimit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&limit=5",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-invalidLimit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var limit = pm.collectionVariables.get(\"limitInvalid\")\r",
							"const errorMessage = \"limit property is not numeric: \" + limit\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&limit=invalid",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-negativeLimit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"limit property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&limit=-1",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-DateCreation-within-Today",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%38%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%38%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-DateCreation-noWithin-Today",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%38%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%38%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-profileName-startsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%61%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%61%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-profileName-endsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-profileName-contains",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-profileName-equalTo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%4c%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%4c%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-site-startsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-site-endsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-site-contains",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%65%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%65%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-site-equalTo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%65%66%61%75%6c%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%44%65%66%61%75%6c%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-SupportedVoiceArtisan-startsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-SupportedVoiceArtisan-endsWith",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-SupportedVoiceArtisan-contains",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%32%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%32%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-SupportedVoiceArtisan-equalTo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%30%2c%31%2e%31%2c%31%2e%32%2c%32%2e%30%2c%32%2e%35%2c%33%2e%30%2c%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%30%2c%31%2e%31%2c%31%2e%32%2c%32%2e%30%2c%32%2e%35%2c%33%2e%30%2c%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-taskCompatibility-equalTo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%30%2c%31%2e%31%2c%31%2e%32%2c%32%2e%30%2c%32%2e%35%2c%33%2e%30%2c%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%69%64%22%3a%22%34%37%31%22%2c%20%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%2e%30%2c%31%2e%31%2c%31%2e%32%2c%32%2e%30%2c%32%2e%35%2c%33%2e%30%2c%34%2e%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-taskCompatibility-notEqualTo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-limit-offset-sortColumnAndsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d&offset=2&limit=4&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						},
						{
							"key": "offset",
							"value": "2"
						},
						{
							"key": "limit",
							"value": "4"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getData-submitedFilterCriterion-2filters-limit-offset-sortColumnAndsortAsc Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}deviceprofiles/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d&offset=2&limit=4&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}deviceprofiles"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						},
						{
							"key": "offset",
							"value": "2"
						},
						{
							"key": "limit",
							"value": "4"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "siteId",
			"value": "invalid",
			"type": "string"
		},
		{
			"key": "siteNotFound",
			"value": "-5",
			"type": "string"
		},
		{
			"key": "offSetInvalid",
			"value": "invalid",
			"type": "string"
		},
		{
			"key": "limitInvalid",
			"value": "invalid",
			"type": "string"
		}
	]
}