{
	"info": {
		"_postman_id": "e8943ea6-5247-4d18-ba42-c856de48874b",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14803454"
	},
	"item": [
		{
			"name": "Fletch User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const obejectType = pm.environment.get(\"filterProperty\")\r",
							"const name = \"admin\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Fletch User\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(obejectType)\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(name)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user/-1",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"-1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User ID Not Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: Not$$$numeric\"\r",
							"\r",
							"pm.test(\"Status code is 00\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Fetch User ID Not Numeric\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/Not$$$numeric",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"Not$$$numeric"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User Invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"User with id 0 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 00\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Fetch User Invalid\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/0",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch User Not Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"User with id -100 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Fetch User Not Exists\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/-100",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						"-100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Invalid Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessages = [\"Password should be of minimum 8 characters in length containing at least 1 upper case letter, 1 lower case letter, 1 number, and 1 non-alphanumeric character.\",\r",
							"                        \"Please provide a valid email address\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete Multiple Users\", function() {\r",
							"    for(let i ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"name\"            : \"Valid Name\",\r\n      \"password\"        : \"InvalidPassword\",\r\n      \"emailAddress\"    : \"Invalid Email Address\",\r\n      \"roles\"           :  [  { \"id\" : -1 }, { \"id\" : -3 }    ],\r\n      \"sites\"           :  [  {\"id\" : -1}   ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User with All sites false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"User must be associated with at least one Site.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create New User with All sites false\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": \"allsitesfalse@honeywell.com\",\r\n        \"name\": \"All Sites As False\",\r\n        \"password\": \"Test12345!\",\r\n        \"roles\": {\r\n            \"id\": -1,\r\n            \"name\": \"Administrator\"\r\n        },\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"allSitesAccess\": false\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const userName = pm.collectionVariables.get(\"userName\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Remove From Role\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(userName)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"userID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", \"QA\" + number)\r",
							"pm.collectionVariables.set(\"emailAddress\", \"qa\" + number + \"@honeywell.com\")\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": {{emailAddress}},\r\n        \"name\": {{userName}},\r\n        \"password\": \"Test12345!\",\r\n        \"roles\": {\r\n            \"id\": -1,\r\n            \"name\": \"Administrator\"\r\n        },\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"sites\":\r\n        [\r\n            {\r\n                \"id\": -1\r\n            }   \r\n        ]\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User with Existing Name and Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"User email address \" + pm.collectionVariables.get(\"emailAddress\") + \" already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test('Validate Existing user Message', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": {{emailAddress}},\r\n        \"password\": \"Test12345!\",\r\n        \"name\": {{username}},\r\n        \"roles\": {\r\n            \"id\": -1,\r\n            \"name\": \"Administrator\"\r\n        },\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"allSitesAccess\": true\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Length Violations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"name property exceeds the allowable length.\",\r",
							"                     \"Password property exceeds the allowable length.\",\r",
							"                     \"emailAddress property exceeds the allowable length.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create User Length Violations\", function() {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"name\"            : \"This is my reallllllllyyyy looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaame\",\r\n      \"password\"        : \"ThisPassWordIsToooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong1$\",\r\n      \"emailAddress\"    : \"ThisEmailAddresIsToooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong1$\",\r\n      \"roles\"           :  [  { \"id\" : 23 }, { \"id\" : -3 }    ],\r\n      \"sites\"           :  [  {\"id\" : -1}   ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Bad Role And Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Role with id 800 cannot be found.\",\r",
							"                      \"Role with id 900 cannot be found.\",\r",
							"                      \"Site with id -731 cannot be found.\",\r",
							"                      \"Site with id -734 cannot be found.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create User Bad Role And Site\", function() {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"name\"            : \"Bad Roles and Sites\",\r\n      \"password\"        : \"Talkman1$\",\r\n      \"emailAddress\"    : \"foo1@bar.com\",\r\n      \"roles\"           :  [  { \"id\" : 800 }, { \"id\" : 900 }   ],\r\n      \"sites\"           :  [  {\"id\" : -731},  {\"id\" : -734}     ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User with Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"name property cannot be null or empty.\",\r",
							"                     \"password property cannot be null or empty.\",\r",
							"                     \"emailAddress property cannot be null or empty.\",\r",
							"                     \"User must be associated with at least one Role.\",\r",
							"                     \"User must be associated with at least one Site.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create User with Empty\", function() {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Disable with unexisting Role ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 32 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Disable with unexisting Role ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              : {{userID}},\r\n      \"name\"            : {{userName}},\r\n      \"password\"        : \"Talkman1$\",\r\n      \"emailAddress\"    : {{emailAddress}},\r\n      \"roles\"           :  [  { \"id\" : 32 }    ],\r\n      \"sites\"           :  [  {\"id\" : -1}   ],\r\n      \"changePwd\"       : true,\r\n      \"enabled\"         : false,\r\n      \"notes\"           : \"These are notes for Testing User\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateUser Enable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Enable\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.enabled).eql(true)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              : {{userID}},\r\n      \"name\"            : {{userName}},\r\n      \"password\"        : \"Talkman1$\",\r\n      \"emailAddress\"    : {{emailAddress}},\r\n      \"roles\"           :  [  { \"id\" : -1 }    ],\r\n      \"sites\"           :  [  {\"id\" : -1}   ],\r\n      \"changePwd\"       : true,\r\n      \"enabled\"         : true,\r\n      \"notes\"           : \"These are notes for Testing User\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Disable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Disable\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.enabled).eql(false)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              : {{userID}},\r\n      \"name\"            : {{userName}},\r\n      \"password\"        : \"Talkman1$\",\r\n      \"emailAddress\"    : {{emailAddress}},\r\n      \"roles\"           :  [  { \"id\" : -1 } ],\r\n      \"sites\"           :  [  {\"id\" : -1}   ],\r\n      \"changePwd\"       : true,\r\n      \"enabled\"         : false,\r\n      \"notes\"           : \"These are notes for Testing User\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Add From Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const roleNames = [\"Read-Only\", \"Administrator\"]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Add From Role\", function () {\r",
							"    for (let i = 0 ; i < roleNames.length ; i ++){\r",
							"        pm.expect(jsonData.response.dataObjects.roles[i][\"name\"]).eql(roleNames[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -1 }, { \"id\" : -3 }  ],\r\n      \"sites\"           :   [  { \"id\" : -1 }]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Remove From Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const roleName = \"Read-Only\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Remove From Role\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.roles.name).eql(roleName)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -3 }  ],\r\n      \"sites\"           :   [  { \"id\" : -1 }]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Change Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var emailAddress = \"testing@test.com\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Remove From Role\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.emailAddress).eql(emailAddress)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   \"testing@test.com\",\r\n      \"roles\"           :   [  { \"id\" : -3 }  ],\r\n      \"sites\"           :[  { \"id\" : -1}  ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Change Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var name = pm.collectionVariables.get(\"userName\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Change Name\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(name)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", \"Tester\" + number)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -3 }  ],\r\n      \"sites\"           :[  { \"id\" : -1}  ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User all Sites false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessage = \"User must be associated with at least one Site.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User all Sites false\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -3 }  ],\r\n      \"allSitesAccess\"  :   false   \r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Change wrong Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessage = \"Password should be of minimum 8 characters in length containing at least 1 upper case letter, 1 lower case letter, 1 number, and 1 non-alphanumeric character.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Change wrong Password\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"PasswordUpdated!\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -1 }  ],\r\n      \"allSitesAccess\"  :   true\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Change Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"PasswordUpdated1!\",\r\n      \"emailAddress\"    :   \"AllSiteUser@bar.com\",\r\n      \"roles\"           :   [  { \"id\" : -1 }  ],\r\n      \"allSitesAccess\"  :   true\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Change Password to a previous one",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Password must not be same as the last 3 passwords.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Change Password to a previous one\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"Talkman1$\",\r\n      \"emailAddress\"    :   \"AllSiteUser@bar.com\",\r\n      \"roles\"           :   [  { \"id\" : -1 }  ],\r\n      \"allSitesAccess\"  :   true\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var notes = \"These are updated Notes\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update User Notes\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.notes).eql(notes)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"userID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user\": {\r\n      \"id\"              :   {{userID}},\r\n      \"name\"            :   {{userName}},\r\n      \"password\"        :   \"PasswordUpdated1!\",\r\n      \"emailAddress\"    :   {{emailAddress}},\r\n      \"roles\"           :   [  { \"id\" : -1 }  ],\r\n      \"allSitesAccess\"  :   true,\r\n      \"notes\": \"These are updated Notes\"  \r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user/",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User No IDs Passed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete User No IDs Passed\", function() {\r",
							"     pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user?ids=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "ids",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Bad IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: abc\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete User Bad IDs\", function () {\r",
							"     pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user?ids=abc",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "ids",
							"value": "abc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const successMessage = \"User \" + pm.collectionVariables.get(\"userID\") + \" was deleted.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete User\", function() {\r",
							"    pm.expect(jsonData.response.success.msg).eql(successMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user?ids={{userID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User with All sites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var objectType = pm.environment.get(\"filterProperty\")\r",
							"var number = Math.random()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Create New User with All sites\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(objectType)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"userID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", \"QA\" + number)\r",
							"pm.collectionVariables.set(\"emailAddress\", \"qa\" + number + \"@test.com\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": {{emailAddress}},\r\n        \"name\": {{userName}},\r\n        \"password\": \"Test12345!\",\r\n        \"roles\": {\r\n            \"id\": -1,\r\n            \"name\": \"Administrator\"\r\n        },\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"allSitesAccess\": true\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User with Multiple Roles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const objectType = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Create New User with Multiple Roles\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(objectType)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"newUserID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", \"Test\" + number)\r",
							"pm.collectionVariables.set(\"emailAddress\", \"test\" + number + \"@test.com\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": {{emailAddress}},\r\n        \"name\": {{userName}},\r\n        \"password\": \"newPass123!\",\r\n        \"roles\": [{\r\n                    \"id\": -1,\r\n                    \"name\": \"Administrator\"\r\n                }\r\n        ],\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"allSitesAccess\": true\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Multiple Users with errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: asd\"\r",
							"const successMessages = [\"User \" + pm.collectionVariables.get(\"userID\") + \" was deleted.\",\r",
							"                        \"User \" + pm.collectionVariables.get(\"newUserID\") + \" was deleted.\"]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete Multiple Users\", function() {\r",
							"    for(let i ; i < successMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.success[i][\"msg\"]).eql(successMessages[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user?ids={{userID}},{{newUserID}},abc",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{userID}},{{newUserID}},abc"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "emailAddress",
			"value": "",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "tester",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"key": "newUserID",
			"value": "",
			"type": "string"
		}
	]
}