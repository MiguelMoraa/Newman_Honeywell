{
	"info": {
		"_postman_id": "d36144a1-bde7-412c-bead-990a60aab973",
		"name": "PSnF_deviceLogs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861454",
		"_collection_link": "https://martian-eclipse-381947.postman.co/workspace/VCNG-automation~60598d72-d6bf-4ec8-9ccc-e86c28b839db/collection/22861454-d36144a1-bde7-412c-bead-990a60aab973?action=share&creator=22861454&source=collection_link"
	},
	"item": [
		{
			"name": "Get-data-missingSiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var siteId = pm.environment.get(\"site\")\r",
							"const errorMessage = \"siteId property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-validSiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-invalidSiteId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var siteId = pm.environment.get(\"site\")\r",
							"const errorMessage = \"siteId property is not numeric: \" + siteId\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=invalid",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-SiteIdNotFound",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var siteId = pm.environment.get(\"siteNotFound\")\r",
							"const errorMessage = \"Site with id \" + siteId + \" cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-5",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogFileName-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logFileName&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logFileName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogFileName-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logFileName&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logFileName"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogFileName-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logFileName&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logFileName"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogFileName-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logFileName",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logFileName"
						},
						{
							"key": "sortAsc",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-invalidsortColumn-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: devicelogs.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=invalid&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-invalidsortColumn-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: devicelogs.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=invalid&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-invalidsortColumn-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\",\r",
							"    \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: devicelogs.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=invalid&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-invalidsortColumn-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: devicelogs.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=invalid",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-missingsortColumn-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-missingsortColumn-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-missingsortColumn-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-missingsortColumn-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogType-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logType&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logType"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogType-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logType&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logType"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogType-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logType&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logType"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlogType-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logType",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logType"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlterminal.name-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=terminal.name&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "terminal.name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlterminal.name-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=terminal.name&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "terminal.name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlterminal.name-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=terminal.name&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "terminal.name"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnlterminal.name-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=terminal.name",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "terminal.name"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStartTime-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=startTime&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "startTime"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStartTime-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=startTime&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "startTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStartTime-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=startTime&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "startTime"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStartTime-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=startTime",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "startTime"
						},
						{
							"key": "sortAsc",
							"value": "false",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStopTime-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=stopTime&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "stopTime"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStopTime-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=stopTime&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "stopTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStopTime-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=stopTime&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "stopTime"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnStopTime-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=stopTime",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "stopTime"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnAutoTrunOffTime-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=autoTurnOffTime&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "autoTurnOffTime"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnAutoTrunOffTime-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=autoTurnOffTime&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "autoTurnOffTime"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnAutoTrunOffTime-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=autoTurnOffTime&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "autoTurnOffTime"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnAutoTrunOffTime-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=autoTurnOffTime",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "autoTurnOffTime"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnLogMsgSize-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logMsgSize&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logMsgSize"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnLogMsgSize-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logMsgSize&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logMsgSize"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnLogMsgSize-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logMsgSize&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logMsgSize"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnLogMsgSize-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=logMsgSize",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "logMsgSize"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnOperatorName-And-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=operatorName&sortAsc=true",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "operatorName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnOperatorName-And-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=operatorName&sortAsc=false",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "operatorName"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnOperatorName-And-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var errorMessages = [\r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Errors Messages\", function () {\r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=operatorName&sortAsc=",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "operatorName"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-sortColumnOperatorName-And-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&sortColumn=operatorName",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "operatorName"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-OffSet-Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&offset=3",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-OffSet-invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var offSet = pm.environment.get(\"offSetInvalid\")\r",
							"const errorMessage = \"offset property is not numeric: \" + offSet\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&offset=invalid",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-OffSet-missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "invalid",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-Limit- valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&limit=2",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-Limit- invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var limit = pm.environment.get(\"limitInvalid\")\r",
							"const errorMessage = \"limit property is not numeric: \" + limit\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&limit=invalid",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-Limit-missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "i",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-AutomaticStopTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%37%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%37%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-DeviceName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%35%32%30%32%38%39%35%35%34%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%34%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%34%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%35%32%30%32%38%39%35%35%34%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-FileName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-OperatorName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%39%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%49%76%61%6e%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%39%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%49%76%61%6e%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-Size(Bytes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%38%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%32%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%31%30%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-StartTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-data-submittedFilterCriterion-StopTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}devices/log/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n",
					"host": [
						"{{baseURL}}devices"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%36%30%36%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%32%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%37%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d\n"
						}
					]
				}
			},
			"response": []
		}
	]
}