{
	"info": {
		"_postman_id": "d2bb2b0f-c25e-4afe-8e87-f06ceaaa7290",
		"name": "PSnF_Sites",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861454",
		"_collection_link": "https://martian-eclipse-381947.postman.co/workspace/VCNG-automation~60598d72-d6bf-4ec8-9ccc-e86c28b839db/collection/22861454-d2bb2b0f-c25e-4afe-8e87-f06ceaaa7290?action=share&creator=22861454&source=collection_link"
	},
	"item": [
		{
			"name": "VCNG-get-data-siteId-valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-siteId-missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-5",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnName-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=name&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnName-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=name&sortAsc=false",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnName-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json() \r",
							"var errorMessages = [ \r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\", \r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"]\r",
							"    \r",
							"pm.test(\"Status code is 400\", function () { \r",
							"     pm.response.to.have.status(400) })\r",
							"\r",
							"\r",
							"pm.test(\"Validate Bad request Message\", function () { \r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) { \r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i]) \r",
							"    } \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=name&sortAsc=",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnName-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json() \r",
							"var errorMessages = [ \r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\", \r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\"]\r",
							"    \r",
							"pm.test(\"Status code is 400\", function () { \r",
							"     pm.response.to.have.status(400) })\r",
							"\r",
							"\r",
							"pm.test(\"Validate Bad request Message\", function () { \r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) { \r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i]) \r",
							"    } \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=name&sortAsc=",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "name"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnDescription-and-NoSupportedSort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. description column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=description&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "description"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnNotes-and-NoSupportedSort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. notes column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=notes&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "notes"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnTimeZone.ID-and-NoSupportedSort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. timeZone.ID column sort type is NoSort and does not support sorting.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=timeZone.ID&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "timeZone.ID"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnmissing-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnmissing-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. It should not be null or empty if sortAsc is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortAsc=false",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnmissing-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortAsc=",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "site",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumnmissing-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid",
							"disabled": true
						},
						{
							"key": "sortAsc",
							"value": "true",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumInvalid-and-sortAscTrue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: sites.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=invalid&sortAsc=true",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumInvalid-and-sortAscFalse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: sites.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=invalid&sortAsc=false",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumInvalid-and-sortAscNull",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json() \r",
							"var errorMessages = [ \r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\", \r",
							"    \"Invalid value for parameter sortAsc. It should be either true or false.\",\r",
							"    \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: sites.\"]\r",
							"    \r",
							"pm.test(\"Status code is 400\", function () { \r",
							"     pm.response.to.have.status(400) })\r",
							"\r",
							"\r",
							"pm.test(\"Validate Bad request Message\", function () { \r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) { \r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i]) \r",
							"    } \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=invalid&sortAsc=",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-sortColumInvalid-and-missingsortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json() \r",
							"var errorMessages = [ \r",
							"    \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\", \r",
							"    \"Invalid value for parameter sortColumn. invalid column does not exist for entity name: sites.\"]\r",
							"    \r",
							"pm.test(\"Status code is 400\", function () { \r",
							"     pm.response.to.have.status(400) })\r",
							"\r",
							"\r",
							"pm.test(\"Validate Bad request Message\", function () { \r",
							"    for(let i = 0 ; i < errorMessages.length ; i++) { \r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i]) \r",
							"    } \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&sortColumn=invalid",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "sortColumn",
							"value": "invalid"
						},
						{
							"key": "sortAsc",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-offset-valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&offset=5",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-offset-invalid-NotNumeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"offset property is not numeric: invalid\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&offset=invalid",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-offset-negativeNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"offset property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&offset=-54",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "offset",
							"value": "-54"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-limit-valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&limit=5",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-limit-invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"limit property is not numeric: invalid\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&limit=invalid",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "invalid"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-limit-negativeNumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"limit property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate not find source file\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&limit=-56",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "-56"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-limit-valid-and-offset-valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&limit=5&offset=5",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-submittedFilterCriterion-Description",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%32%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%2c%20%22%63%72%69%74%4e%75%6d%22%3a%31%7d",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%32%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%33%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%2c%20%22%63%72%69%74%4e%75%6d%22%3a%31%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-submittedFilterCriterion-Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%54%68%69%73%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%54%68%69%73%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-submittedFilterCriterion-SiteName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%31%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-submittedFilterCriterion-TimeZone",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%69%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%69%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "VCNG-get-data-submittedFilterCriterion-2Filters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites/data?siteId=-1&submittedFilterCriterion=%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%69%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d%2c%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d",
					"host": [
						"{{baseURL}}sites"
					],
					"path": [
						"data"
					],
					"query": [
						{
							"key": "siteId",
							"value": "-1"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%35%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%69%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d%2c%7b%22%63%6f%6c%75%6d%6e%49%64%22%3a%22%2d%34%30%33%22%2c%20%22%6f%70%65%72%61%6e%64%49%64%22%3a%22%2d%31%22%2c%20%22%76%61%6c%75%65%31%22%3a%22%74%65%73%74%22%2c%20%22%76%61%6c%75%65%32%22%3a%22%22%7d"
						}
					]
				}
			},
			"response": []
		}
	]
}