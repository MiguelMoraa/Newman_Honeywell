{
	"info": {
		"_postman_id": "4f5d82bd-baf5-40d1-8ef3-f2302e9f19c1",
		"name": "PSnF_Logs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22861454",
		"_collection_link": "https://martian-eclipse-381947.postman.co/workspace/VCNG-automation~60598d72-d6bf-4ec8-9ccc-e86c28b839db/collection/22861454-4f5d82bd-baf5-40d1-8ef3-f2302e9f19c1?action=share&creator=22861454&source=collection_link"
	},
	"item": [
		{
			"name": "Get Log All Sites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName without sortAsc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message for non sorAsc parameter\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with sortAsc false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=false",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with sortAsc true",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with sortAsc invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter sortAsc. It should be either true or false.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate sortAsc invlaid\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with sortAsc empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Invalid value for parameter sortAsc. It should not be null or empty if sortColumn is provided.\",\r",
							"\"Invalid value for parameter sortAsc. It should be either true or false.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message for sortAsc empty\", function () {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with offset empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with offset non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Offset non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with offset negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"offset property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Offset Negative Valule\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=-5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "-5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with offset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=2",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with limit empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=1&limit=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with limit non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"limit property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Limit non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=2&limit=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "2"
						},
						{
							"key": "limit",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with limit negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"limit property value cannot be negative.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Limit Negative Valule\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=2&limit=-5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "2"
						},
						{
							"key": "limit",
							"value": "-5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log with limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=displayName&sortAsc=true&offset=1&limit=5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "displayName"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=fileType&sortAsc=true&offset=1&limit=5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "fileType"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=actualFileSize&sortAsc=true&offset=1&limit=5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "actualFileSize"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter starts with Voice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Voice%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22Voice%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter starts with empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Useres of Site\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter starts with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate displayName starts with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-1%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter ends with log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22log%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22log%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter ends with empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Useres of Site\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter ends with xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate displayName ends with xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-2%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter contains manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22manager%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22manager%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter contains empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Useres of Site\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter contains xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate displayName contains xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=1&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-3%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter equal to VoiceConsole.log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22VoiceConsole.log%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22VoiceConsole.log%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter equal to empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Useres of Site\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort displayName filter equal to xyz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate displayName equal to xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-201%22,%20%22operandId%22:%22-4%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate displayName contains xyz\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 3. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    for(let i =0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value -5 for operand type: 3. It should be greater than or equal to 0. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to negative Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22-5%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22-5%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter equal to non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value null for operand type: 3. It should be numeric. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-31%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 3. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType not equal to empty\", function () {\r",
							"    for(let i =0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value -5 for operand type: 3. It should be greater than or equal to 0. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to negative Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22-5%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22-5%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort fileType filter not equal to non Numberic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value null for operand type: 3. It should be numeric. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-202%22,%20%22operandId%22:%22-32%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter equal 132",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter equal to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter equal to empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter equal to non Numberic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter equal to negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate actualFileSize equal to negative Value\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-11%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather than 30000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%2230000%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%2230000%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather than 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather than empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather than non Numberic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType greathern than non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather than negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-12%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather or equal to 132",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather or equal to 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather or equal empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather or equal non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType greather or equal to non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter greather or equal negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-13%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less than 20000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%2220000%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%2220000%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less than 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate actualFileSize less than 0\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less than empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less than non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType less than non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less than negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate actualFileSize less than negative Value\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-14%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less or equal than 853",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22853%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22853%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less or equal than 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less or equal than empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter  less or equal than non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType less or equal than non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter less or equal than negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate actualFileSize less or equal than negative Value\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D\n",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-15%22,%20%22value1%22:%22-132%22,%20%22value2%22:%22%22%7D\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between 132000 and 1000000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%221000000%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%221000000%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between 132000 and empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between empty and 1000000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22%22,%20%22value2%22:%221000000%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22%22,%20%22value2%22:%221000000%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between non Numeric and 1000000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType between non Numeric and 1000000\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%221000000%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%221000000%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between 132000 and non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType between 132000 and non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%22xyz%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22132000%22,%20%22value2%22:%22xyz%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between empty and empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value  for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType equal to empty\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between non Numeric and non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 1. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate fileType between non Numeric and non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22xyz%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22xyz%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort actualFileSize filter between negative Value and negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const responseMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate actualFileSize between negative Value and negative Value\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(responseMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22-853%22,%20%22value2%22:%22-853%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-203%22,%20%22operandId%22:%22-16%22,%20%22value1%22:%22-853%22,%20%22value2%22:%22-853%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 0 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within 0\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 9 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within 9\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%229%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value -8 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate between negative Value and negative Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 2. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate filter  within empty\", function () {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-23%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within not 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 0 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within not 0\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%220%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%222%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%223%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%224%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%225%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within not 6\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%226%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"No data to display.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within not 7\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%227%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"var results = jsonData.response.dataObjects.length\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"if (results > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Results Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects[0]).to.have.property(filterObject)\r",
							"            })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate one Result Success Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"            })\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%228%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter  within not non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value null for operand type: 2. It should be numeric. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within not 8\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within not negative Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value -8 for operand type: 2. It should be between 1 and 8. Cannot be filtered.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate within not negative Value\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter within not empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value null for operand type: 2. It should be numeric. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate filter  within empty\", function () {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-22%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter no value 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value 1 for operand type: 2. It should be no.value. Cannot be filtered.\"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate not value 1\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%221%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter no value non Numeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value xyz for operand type: 2. It should be no.value. Cannot be filtered.\"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate no value non Numeric\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22xyz%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter no value negative value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid filter value -8 for operand type: 2. It should be no.value. Cannot be filtered.\"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate not value 1\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22-8%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Log sort modificationDate filter no value empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"Empty value for parameter value1 in submittedFilterCriterion. A value must be entered to be filtered.\",\r",
							"    \"Invalid filter value  for operand type: 2. It should be no.value. Cannot be filtered.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate modificationDate filter  within empty\", function () {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/data?sortColumn=modificationDate&sortAsc=true&offset=0&limit=5&submittedFilterCriterion=%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"data"
					],
					"query": [
						{
							"key": "sortColumn",
							"value": "modificationDate"
						},
						{
							"key": "sortAsc",
							"value": "true"
						},
						{
							"key": "offset",
							"value": "0"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "submittedFilterCriterion",
							"value": "%7B%20%22columnId%22:%22-204%22,%20%22operandId%22:%22-21%22,%20%22value1%22:%22%22,%20%22value2%22:%22%22%7D"
						}
					]
				}
			},
			"response": []
		}
	]
}