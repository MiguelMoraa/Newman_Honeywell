{
	"info": {
		"_postman_id": "9ee81710-2490-4678-bde6-5d21392f8222",
		"name": "Smoke",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14803454"
	},
	"item": [
		{
			"name": "Fetch all Sites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Fletch all Sites\", function () {\r",
							"    pm.expect(jsonData.sites.site[0][\"name\"]).eql(\"Default\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "GET a list of all sites that are currently found in Voice Console."
			},
			"response": []
		},
		{
			"name": "Create Site Regression site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct name: \" + jsonData.response.dataObjects.name, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).to.eql(\"A Site for Regression Testing\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct description name: \" + jsonData.response.dataObjects.description, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.description).to.eql(\"This is the description for A Regression Testing Site.\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct timeZoneId: \" + jsonData.response.dataObjects.timeZoneId, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.timeZoneId).to.eql(\"America/Kentucky/Monticello\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct notes: \" + jsonData.response.dataObjects.notes, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.notes).to.eql(\"Notes for A Regression Testing Site.\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct shiftStartTime: \" + jsonData.response.dataObjects.shiftStartTime, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.shiftStartTime).to.eql(\"00:00\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"A Site for Regression Testing\",\r\n        \"description\": \"This is the description for A Regression Testing Site.\",\r\n        \"timeZoneId\": \"America/Kentucky/Monticello\",\r\n        \"notes\": \"Notes for A Regression Testing Site.\",\r\n        \"shiftStartTime\": \"00:00\"\r\n    }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Site using EAPTLS with SITE credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.name).to.eql(\"An EAP TLS Site With SITE Credentials\")\r",
							"})\r",
							"pm.test(\"Has correct credentialAssociation: \" + jsonData.response.dataObjects.credentialAssociation, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialAssociation).to.eql(\"SITE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialType: \" + jsonData.response.dataObjects.credentialType, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialType).to.eql(\"CERTIFICATE\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP TLS Site With SITE Credentials\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"SITE\"\n\nThis means that you MUST have a certificate and key for the site wide user and the restricted user when creating this site. A certificate password is optional for both users."
			},
			"response": []
		},
		{
			"name": "Create Site using EAPTLS with SITE credentials and Server Certificate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has property serverCredentials\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(\"serverCredentials\")\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.name).to.eql(\"An EAP TLS Site With SITE Credentials and Server Certificate\")\r",
							"})\r",
							"pm.test(\"Has correct credentialAssociation: \" + jsonData.response.dataObjects.credentialAssociation, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialAssociation).to.eql(\"SITE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialType: \" + jsonData.response.dataObjects.credentialType, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialType).to.eql(\"CERTIFICATE\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP TLS Site With SITE Credentials and Server Certificate\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        },\r\n        \"serverCredentials\": {\r\n            \"certificateFileContents\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFVnpDQ0F6K2dBd0lCQWdJQkFqQU5CZ2txaGtpRzl3MEJBUVVGQURBWE1SVXdFd1lEVlFRREV3eFhhVVpwDQpMVkp2YjNRdFEwRXdIaGNOTURVd01UQXhNREF3TURBd1doY05NalV3TVRBeE1EQXdNREF3V2pBak1TRXdId1lEDQpWUVFERXhoWGFVWnBMVWx1ZEdWeWJXVmthV0YwWlMxRFFTMXpjbll3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNElCRHdBd2dnRUtBb0lCQVFERGlya01NbmU2bTJSeWwvanpxOEhFUWt3YTFoeTFYdm9SWExaVGpUeFRaQmJtDQphOEFZMkNiUnNMWlpsbjdSUmVvZTZGbHB4a2tjU3hzUitqdEp2TkdxMlJMYkxiVEFyRzk4Y1UyUHJ6YUlRRFZpDQpXYzk1S3F0TGVBNkhLdkRWNTZxM1MwbFMrQy9QbWJHUlYvTmpxUFhKU1IzSzJtVmRTVFdDU3R0SHVzMjRsRlhVDQpQa3p4ZWpXN1RBOTRSQWhKRHdBNFExVG5BZTJ0KzVTNHRrMFlRR2JFemxjSnRVK3c5cDUzK1NxZmFLTXpablBTDQpTRkJkNklhbHVxQVcxRWFoS3ZRMytRVFpKNkZVVG9DeHBMWEo2c0RMb2tySnB4Y0hEbHpqeHlQaEVNemUza2J6DQp4L0g3ejBuVGJLUHRWaHBLcEhTajJNVDE3R1pJUjZXTjFhMUkxOVozQWdNQkFBR2pnZ0dnTUlJQm5EQS9CZ05WDQpIU01FT0RBMmdCVFhIWFRJMW1xVWpCRFBCVS9qbHFiV3o3Smk4NkVicEJrd0Z6RVZNQk1HQTFVRUF4TU1WMmxHDQphUzFTYjI5MExVTkJnZ0VCTUVFR0NXQ0dTQUdHK0VJQkJBUTBGakpvZEhSd09pOHZjMlZ5ZG1WeUxuZHBabWxzDQpZV0p6TG14dlkyRnNMMk5oTDJOeWJDOTNhV1pwY205dmRHTmhMbU55YkRCREJnTlZIUjhFUERBNk1EaWdOcUEwDQpoakpvZEhSd09pOHZjMlZ5ZG1WeUxuZHBabWxzWVdKekxteHZZMkZzTDJOaEwyTnliQzkzYVdacGNtOXZkR05oDQpMbU55YkRCTkJnZ3JCZ0VGQlFjQkFRUkJNRDh3UFFZSUt3WUJCUVVITUFLR01XaDBkSEE2THk5elpYSjJaWEl1DQpkMmxtYVd4aFluTXViRzlqWVd3dlkyRXZZMkV2ZDJsbWFYSnZiM1JqWVM1amNuUXdJQVlEVlIwU0JCa3dGNElWDQpjMlZ5ZG1WeUxuZHBabWxzWVdKekxteHZZMkZzTUNBR0ExVWRFUVFaTUJlQ0ZYTmxjblpsY2k1M2FXWnBiR0ZpDQpjeTVzYjJOaGJEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BNEdBMVVkRHdFQi93UUVBd0lCaGpBZEJnTlZIUTRFDQpGZ1FVUDV6LytPV3owNnRaNXd0K010dXd4VVFVS3pZd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFDbjNWZWRrDQo4WFFaMjVsak1xbzA4VE81NlFnYWhSc012OHdPcGxWd21tdjk5dlpTWmlFenBQL3RJN0prMjdRYkZaTzYrTG5RDQpUb1RaT2NteCt4a0lpMWM5Tm12dWVKc2dCMWl2NEdlc1NvZTVoV3VIaU5mbGdGSmV3QUsxelRSajBzMzI4US8wDQphNlNOUUJKcEk5NGlVeFRCcDNvOTAyOGhCeFdPVFNIN21iSUF4Vkc2NldKQTJJMmxDS016TlI5Wll2ZG5UNHhwDQpjVzFzd0g1RFF2RkNxQmJmVXlZR3gvRzJDTXpGdXU5dlh0dG9BZVpsQm90eDVDc2lRNVV0anc0d2QrejZvalVUDQp6SFI0R2lNeis5ZWFGNEFncUp0d0czMmNCbm85bjlRaGF1dXhWM3R0NFFNSW9KMzdtdHJUcHh2M1FvOUpQMUgzDQpKVTN6NnRteXRCbEVXTEk9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQo=\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"SITE\"\n\nThis means that you MUST have a certificate and key for the site wide user and the restricted user when creating this site. A certificate password is optional for both users.\n\nThis test also creates the site with a Server Certificate."
			},
			"response": []
		},
		{
			"name": "Create Site using EAPTLS with DEVICE credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).to.eql(\"An EAP TLS Site with Device Credentials\")\r",
							"})\r",
							"pm.test(\"Has correct credentialAssociation: \" + jsonData.response.dataObjects.credentialAssociation, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialAssociation).to.eql(\"DEVICE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialType: \" + jsonData.response.dataObjects.credentialType, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialType).to.eql(\"CERTIFICATE\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP TLS Site with Device Credentials\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"DEVICE\"\n\nThis means that you MUST have a certificate and key for restricted user when creating this site. A certificate password is optional.\n\nYou do NOT need a Site Wide user when using EAP TLS and DEVICE"
			},
			"response": []
		},
		{
			"name": "Create Site using PEAPV0 with DEVICE credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).to.eql(\"A PEAPV0 Site with Device Credentials\")\r",
							"})\r",
							"pm.test(\"Has correct credentialAssociation: \" + jsonData.response.dataObjects.credentialAssociation, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialAssociation).to.eql(\"DEVICE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialType: \" + jsonData.response.dataObjects.credentialType, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialType).to.eql(\"PASSWORD\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"A PEAPV0 Site with Device Credentials\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"PEAPV0\",\r\n        \"restrictedEapType\" : \"PEAPV0\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"password\" :\"foobar\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"password\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"DEVICE\"\n\nThis means that you MUST have a certificate and key for restricted user when creating this site. A certificate password is optional.\n\nYou do NOT need a Site Wide user when using EAP TLS and DEVICE"
			},
			"response": []
		},
		{
			"name": "Create Site using EAPTLS with DEVICE credentials and restrictedEapType NONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).to.eql(\"An EAP Site with EAPTLS, Device credentials and resrictedEap is NONE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialAssociation: \" + jsonData.response.dataObjects.credentialAssociation, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialAssociation).to.eql(\"DEVICE\")\r",
							"})\r",
							"pm.test(\"Has correct credentialType: \" + jsonData.response.dataObjects.credentialType, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.credentialType).to.eql(\"CERTIFICATE\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP Site with EAPTLS, Device credentials and resrictedEap is NONE\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"restrictedSSID\" : \"MyRestrectedSSID\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"DEVICE\"\n\nThis means that you MUST have a certificate and key for restricted user when creating this site. A certificate password is optional.\n\nYou do NOT need a Site Wide user when using EAP TLS and DEVICE"
			},
			"response": []
		},
		{
			"name": "Create EAP Site that is not using pins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).to.eql(\"An EAP Site that is not using PINS\")\r",
							"})\r",
							"pm.test(\"Has usePin property equal to false\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(\"usePins\").eq(false)\r",
							"})\r",
							"pm.test(\"Does not have sitePin property\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.not.have.property(\"sitePIN\")\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP Site that is not using PINS\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",        \r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create EAP Site that is using pins",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"})\r",
							"pm.test(\"Has usePin property equal to true\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(\"usePins\").eq(true)\r",
							"})\r",
							"pm.test(\"Has sitePIN property with correct value 1234\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(\"sitePIN\").eq(1234)\r",
							"})\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"An EAP Site that is using PINS\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",        \r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create existing regression testing site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"A Site with name A Site for Regression Testing already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"A Site for Regression Testing\",\r\n        \"description\": \"This is the description for A Regression Testing Site.\",\r\n        \"timeZoneId\": \"America/Kentucky/Monticello\",\r\n        \"notes\": \"This should not have been created because it already exists\",\r\n        \"shiftStartTime\": \"00:00\"\r\n    }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with invalid EAP type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter: eapType.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"bad eap type\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"notes\" : \"This site is configured with a bad EAPType.\",\r\n        \"eapType\": \"abc\",\r\n        \"restrictedEapType\" : \"EAPTls\",\r\n        \"restrictedSSID\" :  \"testSSID\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with invalid restrictedEapType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter: restrictedEapType.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Bad restrictedEapType\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"notes\" : \"This site is configured with a bad restrictedEapTYpe.\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"abc\",\r\n        \"restrictedSSID\" :  \"testSSID\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with invalid credentialAssociation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter: credentialAssociation.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Bad credential association\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"notes\" : \"This site is configured with a Bad credential association.\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"restrictedSSID\" :  \"testSSID\",\r\n        \"credentialAssociation\": \"bad\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with restricted EAPtype.NONE and unneed restricted user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"A restricted user is NOT need when restrictedEapType equals EAPype.NONE\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"bad site\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"restrictedSSID\" : \"myRestrictedSSID\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with restricted EAPtype.NONE and no sitewide user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"You must configure a siteWideUser to use EAP.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    console.log(jsonData.response.errors.msg)\r",
							"    console.log(errorMessage)\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Should not be created\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"restrictedSSID\" : \"MyRestrectedSSID\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\"\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with restricted EAPtype.NONE and mising restricted SSID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"restrictedSSID property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"console.log(jsonData.response.errors.msg)\r",
							"console.log(errorMessage)\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"bad site\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Site using PEAPV0 with  missing passwords",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"\r",
							"console.log(jsonData.response.errors[0].msg)\r",
							"pm.test(\"Has correct restrictedUser error message: \", function () {\r",
							"    pm.expect(jsonData.response.errors[0].msg).to.eql(\"The restrictedUser user password property cannot be null or empty.\") \r",
							"})\r",
							"console.log(jsonData.response.errors[1].msg)\r",
							"pm.test(\"Has correct siteWideUser error message \", function () {\r",
							"    pm.expect(jsonData.response.errors[1].msg).to.eql(\"The siteWideUser user password property cannot be null or empty.\") \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"badone\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"PEAPV0\",\r\n        \"restrictedEapType\" : \"PEAPV0\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"DEVICE\"\n\nThis means that you MUST have a certificate and key for restricted user when creating this site. A certificate password is optional.\n\nYou do NOT need a Site Wide user when using EAP TLS and DEVICE"
			},
			"response": []
		},
		{
			"name": "Attempt to create Site with empty server certificate property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"certificateFileContents property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"EAP Site With SITE Credentials and empty Server Certificate\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }, \r\n        \"serverCredentials\": {\r\n            \"certificateFileContents\": \"\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request creates a new site using EAP TLS with EAP Credential type \"SITE\"\n\nThis means that you MUST have a certificate and key for the site wide user and the restricted user when creating this site. A certificate password is optional for both users."
			},
			"response": []
		},
		{
			"name": "Attempt to create a site without the required properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage_0 = \"name property cannot be null or empty.\"\r",
							"const errorMessage_1 = \"shiftStartTime property cannot be null or empty.\"\r",
							"const errorMessage_2 = \"timeZoneId property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error messages\", function () {\r",
							"    pm.expect(jsonData.response.errors[0].msg).eql(errorMessage_0)\r",
							"    pm.expect(jsonData.response.errors[1].msg).eql(errorMessage_1)\r",
							"    pm.expect(jsonData.response.errors[2].msg).eql(errorMessage_2)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n\r\n   }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "Attempt to create a site without the required properties.\n\nRequired properties are\n\n- name\n- shiftStartTime\n- timeZoneId"
			},
			"response": []
		},
		{
			"name": "Attempt to create site using EAPTLS - SITE with no credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json()\r",
							"const errorMessage_0 = \"You must provide both certificateKeyFileContents and certificateFileContent properties for the restricted user.\"\r",
							"const errorMessage_1 = \"You must provide both certificateKeyFileContents and certificateFileContent properties for the sitewide user.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error messages\", function () {\r",
							"    pm.expect(jsonData.response.errors[0].msg).eql(errorMessage_0)\r",
							"    pm.expect(jsonData.response.errors[1].msg).eql(errorMessage_1)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Eap Site No Credentials\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create a site with wrong shiftStartTime format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Start time format is hh:mm\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Bad\",\r\n        \"shiftStartTime\": \"000:000\",\r\n        \"timeZoneId\": \"EST\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create a s with non numeric shiftStartTime time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Start time format is hh:mm\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"bad\",\r\n        \"shiftStartTime\": \"aa:bb\",\r\n        \"timeZoneId\": \"EST\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "This request sends an invalid shiftStartTime as \"aa:bb\" with the intent of catching it as a non numeric value. The problem is that after checking for an empty string, \"aa:bb\" is validated using a regular expression that confirms that \"aa:bb\" only contains numbers and and a semicolon.\n\nWithout lots of work, we will not be able to catch this as a non numeric value but we will still report this condition as an error."
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with empty credential association",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter: credentialAssociation.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Should not have been created\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "Attempt to create an EAP site with an empty credentialAssociation property"
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with empty restrictedSSID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"restrictedSSID property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Site Restricted NONE\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"notes\" : \"This site is configured with the restricted EAP type set to NONE.\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"restrictedSSID\" : \"\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "When creating an site using EAP, the eapType and the restrictedEapType **must** be equal to each other or the restrictedEapType property **must** be equal to NONE.\n\nValid configurations are:\n\n``` json\n\"eapType\": \"AnyEAPType\",    \"restrictedEapType\" : \"AnyEapType\", \n\"eapType\": \"AnyEapType\",    \"restrictedEapType\" : \"NONE\",\n\n ```\n\nWhen\n\n``` json\n\"eapType\": \"AnytEapType\",    \"restrictedEapType\" : \"NONE\",\n\n ```\n\nthe \"restrictedSSID\" must be provided.\n\nThis test is sending an empty string for the \"restrictedEapType\" property."
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with a missing restrictedSSID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"restrictedSSID property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"BAD\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "When creating an site using EAP, the eapType and the restrictedEapType **must** be equal to each other or the restrictedEapType property **must** be equal to NONE.\n\nValid configurations are:\n\n``` json\n\"eapType\": \"AnyEAPType\",    \"restrictedEapType\" : \"AnyEapType\", \n\"eapType\": \"AnyEapType\",    \"restrictedEapType\" : \"NONE\",\n\n ```\n\nWhen\n\n``` json\n\"eapType\": \"AnytEapType\",    \"restrictedEapType\" : \"NONE\",\n\n ```\n\nthe \"restrictedSSID\" must be provided.\n\nThis test is NOT sending \"restrictedEapType\" property."
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP site with eapType NONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid value for parameter eapType: NONE.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"EAP Type NONE\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"NONE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },        \r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to create EAP Site usePins TRUE and no PIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"sitePIN property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"Should not have been created\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"EAPTLS\",        \r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Site for Update Testing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.name).to.eql(\"New Site for Update Testing\")\r",
							"})\r",
							"pm.test(\"Has correct propoerty\", function () {\r",
							"        pm.expect(jsonData.response.dataObjects).to.not.haveOwnProperty(\"eapType\")\r",
							"})\r",
							"\r",
							"// needed for a later test\r",
							"pm.collectionVariables.set(\"existingNameTest\", jsonData.response.dataObjects.id)\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"pm.collectionVariables.set(\"updateSiteId\",  JSON.stringify(jsonData.response.dataObjects.id))\r",
							"console.log(pm.collectionVariables.get(\"updateSiteId\"))\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"New Site for Update Testing\",\r\n        \"description\": \"This is site is being used for update testing\",\r\n        \"timeZoneId\": \"America/Kentucky/Monticello\",\r\n        \"notes\": \"EAP has NOT been configured\",\r\n        \"shiftStartTime\": \"00:00\"\r\n    }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sites | Create EAP Device with eapType NONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"const errorMessage = \"Invalid value for parameter eapType: NONE.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Sites | Create EAP Device with eapType NONE\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"TEST\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"NONE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sites | Create EAP Device with restrictedEapType NONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"const errorMessage = \"restrictedSSID property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Sites | Create EAP Device with eapType NONE\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"TEST\",\r\n        \"shiftStartTime\": \"00:00\",\r\n        \"timeZoneId\": \"EST\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\" : \"NONE\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\" : true,\r\n        \"sitePIN\" : \"1234\",\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update the name of an existing site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*var jsonData = pm.response.json()\r",
							"const errorMessage = \"A Site with name A Site for Regression Testing already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"site\": {\r\n            \"id\": {{existingNameTest}},\r\n            \"name\": \"A Site for Regression Testing\"\r\n        }\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				},
				"description": "Attempt to change the name of an existing site using the name of another existing site."
			},
			"response": []
		},
		{
			"name": "Update Site Add EAP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"EAP as been configured\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.haveOwnProperty(\"eapType\")\r",
							"})\r",
							"pm.test(\"Has restricted and site wide user properties\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.haveOwnProperty(\"siteWideUser\")\r",
							"    pm.expect(jsonData.response.dataObjects).to.haveOwnProperty(\"restrictedUser\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"notes\": \"EAP has been configured\",\r\n        \"usePins\": false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\" : \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\",\r\n            \"certificatePassword\" : \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site Add Server Certificate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Has serverCredentials property\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).to.haveOwnProperty(\"serverCredentials\")\r",
							"})\r",
							"pm.test(\"Has serverCredentials.certificateFileName property\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.serverCredentials).to.haveOwnProperty(\"certificateFileName\")\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"serverCertificateFileName\", jsonData.response.dataObjects.serverCredentials.certificateFileName)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\": false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        },\r\n        \"serverCredentials\": {\r\n            \"certificateFileContents\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFVnpDQ0F6K2dBd0lCQWdJQkFqQU5CZ2txaGtpRzl3MEJBUVVGQURBWE1SVXdFd1lEVlFRREV3eFhhVVpwDQpMVkp2YjNRdFEwRXdIaGNOTURVd01UQXhNREF3TURBd1doY05NalV3TVRBeE1EQXdNREF3V2pBak1TRXdId1lEDQpWUVFERXhoWGFVWnBMVWx1ZEdWeWJXVmthV0YwWlMxRFFTMXpjbll3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNElCRHdBd2dnRUtBb0lCQVFERGlya01NbmU2bTJSeWwvanpxOEhFUWt3YTFoeTFYdm9SWExaVGpUeFRaQmJtDQphOEFZMkNiUnNMWlpsbjdSUmVvZTZGbHB4a2tjU3hzUitqdEp2TkdxMlJMYkxiVEFyRzk4Y1UyUHJ6YUlRRFZpDQpXYzk1S3F0TGVBNkhLdkRWNTZxM1MwbFMrQy9QbWJHUlYvTmpxUFhKU1IzSzJtVmRTVFdDU3R0SHVzMjRsRlhVDQpQa3p4ZWpXN1RBOTRSQWhKRHdBNFExVG5BZTJ0KzVTNHRrMFlRR2JFemxjSnRVK3c5cDUzK1NxZmFLTXpablBTDQpTRkJkNklhbHVxQVcxRWFoS3ZRMytRVFpKNkZVVG9DeHBMWEo2c0RMb2tySnB4Y0hEbHpqeHlQaEVNemUza2J6DQp4L0g3ejBuVGJLUHRWaHBLcEhTajJNVDE3R1pJUjZXTjFhMUkxOVozQWdNQkFBR2pnZ0dnTUlJQm5EQS9CZ05WDQpIU01FT0RBMmdCVFhIWFRJMW1xVWpCRFBCVS9qbHFiV3o3Smk4NkVicEJrd0Z6RVZNQk1HQTFVRUF4TU1WMmxHDQphUzFTYjI5MExVTkJnZ0VCTUVFR0NXQ0dTQUdHK0VJQkJBUTBGakpvZEhSd09pOHZjMlZ5ZG1WeUxuZHBabWxzDQpZV0p6TG14dlkyRnNMMk5oTDJOeWJDOTNhV1pwY205dmRHTmhMbU55YkRCREJnTlZIUjhFUERBNk1EaWdOcUEwDQpoakpvZEhSd09pOHZjMlZ5ZG1WeUxuZHBabWxzWVdKekxteHZZMkZzTDJOaEwyTnliQzkzYVdacGNtOXZkR05oDQpMbU55YkRCTkJnZ3JCZ0VGQlFjQkFRUkJNRDh3UFFZSUt3WUJCUVVITUFLR01XaDBkSEE2THk5elpYSjJaWEl1DQpkMmxtYVd4aFluTXViRzlqWVd3dlkyRXZZMkV2ZDJsbWFYSnZiM1JqWVM1amNuUXdJQVlEVlIwU0JCa3dGNElWDQpjMlZ5ZG1WeUxuZHBabWxzWVdKekxteHZZMkZzTUNBR0ExVWRFUVFaTUJlQ0ZYTmxjblpsY2k1M2FXWnBiR0ZpDQpjeTVzYjJOaGJEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BNEdBMVVkRHdFQi93UUVBd0lCaGpBZEJnTlZIUTRFDQpGZ1FVUDV6LytPV3owNnRaNXd0K010dXd4VVFVS3pZd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFDbjNWZWRrDQo4WFFaMjVsak1xbzA4VE81NlFnYWhSc012OHdPcGxWd21tdjk5dlpTWmlFenBQL3RJN0prMjdRYkZaTzYrTG5RDQpUb1RaT2NteCt4a0lpMWM5Tm12dWVKc2dCMWl2NEdlc1NvZTVoV3VIaU5mbGdGSmV3QUsxelRSajBzMzI4US8wDQphNlNOUUJKcEk5NGlVeFRCcDNvOTAyOGhCeFdPVFNIN21iSUF4Vkc2NldKQTJJMmxDS016TlI5Wll2ZG5UNHhwDQpjVzFzd0g1RFF2RkNxQmJmVXlZR3gvRzJDTXpGdXU5dlh0dG9BZVpsQm90eDVDc2lRNVV0anc0d2QrejZvalVUDQp6SFI0R2lNeis5ZWFGNEFncUp0d0czMmNCbm85bjlRaGF1dXhWM3R0NFFNSW9KMzdtdHJUcHh2M1FvOUpQMUgzDQpKVTN6NnRteXRCbEVXTEk9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQo=\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site EAP Update Server Certificate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Certificate was updated\", function () {\r",
							"    var previousFileName = pm.collectionVariables.get(\"serverCertificateFileName\")\r",
							"    pm.expect(jsonData.response.dataObjects.serverCredentials.serverCertificateFileName).to.not.eql(previousFileName)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\": false,\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        },\r\n        \"serverCredentials\": {\r\n            \"certificateFileContents\": \"updated Certificate\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site EAP Site Wide User Certificate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const certificateKeyFileName = \"SiteWideUserKey\"\r",
							"const certificateFileName = \"SiteWideUserCertificate\"\r",
							"const userName = \"SiteWide-User\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Site Wide User certificate and certificate password were added\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser).to.haveOwnProperty(\"certificateFileName\")\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser).to.haveOwnProperty(\"certificateKeyFileName\")\r",
							"})\r",
							"\r",
							"pm.test(\"Site Wide User Certificate data is correct\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser.userName).eql(userName)\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser.certificateFileName).contains(certificateFileName)\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser.certificateKeyFileName).contains(certificateKeyFileName)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\": true,\r\n        \"sitePIN\": \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"Updated -SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\": \"Restricted-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site EAP Update Restricted User Certificate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const certificateKeyFileName = \"RestrictedUserKey\"\r",
							"const certificateFileName = \"RestrictedUserCertificate\"\r",
							"const userName = \"Restricted-User\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Restricted User certificate and certificate password were added\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser).to.haveOwnProperty(\"certificateFileName\")\r",
							"    pm.expect(jsonData.response.dataObjects.siteWideUser).to.haveOwnProperty(\"certificateKeyFileName\")\r",
							"})\r",
							"\r",
							"pm.test(\"Restricted User Certificate data is correct\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.restrictedUser.userName).eql(userName)\r",
							"    pm.expect(jsonData.response.dataObjects.restrictedUser.certificateFileName).contains(certificateFileName)\r",
							"    pm.expect(jsonData.response.dataObjects.restrictedUser.certificateKeyFileName).contains(certificateKeyFileName)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\": true,\r\n        \"sitePIN\": \"1234\",\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Updated-Restricted-User-KeyContent\",\r\n            \"certificateFileContents\": \"Restricted-User-FileContent\"\r\n        },\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"Updated -SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        },\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site Switch to Device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const credentialAssociation = \"DEVICE\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Update Site Switch to Device\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.credentialAssociation).eql(credentialAssociation)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"name\" : \"Switching from SITE to DEVICE EAP\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"DEVICE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"Restricted-User-FileContent\"\r\n        },\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\"   : \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site Switch to Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const credentialAssociation = \"SITE\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"pm.test(\"Update Site Switch to Site\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.credentialAssociation).eql(credentialAssociation)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": {{updateSiteId}},\r\n        \"name\" : \"Switching from DEVICE back to SITE EAP\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Updated-Restricted-User-KeyContent\",\r\n            \"certificateFileContents\": \"Restricted-User-FileContent\"\r\n        }, \r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Empty Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": \"\",\r\n        \"name\" : \"not exist\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\": \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site non numeric id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: abcd\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": \"abcd\",\r\n        \"name\" : \"not exist\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\": \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update non existing Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Site with id 1000000000000000000 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": 1000000000000000000,\r\n        \"eapType\": \"EAPTLS\",\r\n        \"restrictedEapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"chargerDisconnect\": false,\r\n        \"usePins\": true,\r\n        \"sitePIN\": \"1234\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\": \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        },\r\n        \"restrictedUser\": {\r\n            \"userName\": \"Restricted-User\",\r\n            \"certificateKeyFileContents\": \"Restricted-User-KeyContent\",\r\n            \"certificateFileContents\": \"Restricted-User-FileContent\",\r\n            \"certificatePassword\": \"foobar\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Site missing id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"You must select at least one site to be deleted.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"id\": \"\",\r\n        \"name\" : \"not exist\",\r\n        \"eapType\": \"EAPTLS\",\r\n        \"credentialAssociation\": \"SITE\",\r\n        \"restrictedEapType\" : \"EAPTLS\",\r\n        \"siteWideUser\": {\r\n            \"userName\": \"SiteWide-User\",\r\n            \"certificatePassword\": \"foobar\",\r\n            \"certificateKeyFileContents\": \"SiteWide-User-KeyContent\",\r\n            \"certificateFileContents\": \"SiteWide-User-FileContent\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites?ids=",
					"host": [
						"{{baseURL}}sites"
					],
					"query": [
						{
							"key": "ids",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Multiple Unknown Sites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage_0 = \"Site with id 100000 cannot be found.\"\r",
							"const errorMessage_1 = \"Site with id 200000 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct error messages: \", function () {\r",
							"    pm.expect(jsonData.response.errors[0].msg).to.eql(\"Site with id 100000 cannot be found.\") \r",
							"    pm.expect(jsonData.response.errors[1].msg).to.eql(\"Site with id 200000 cannot be found.\") \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites?ids=100000,200000",
					"host": [
						"{{baseURL}}sites"
					],
					"query": [
						{
							"key": "ids",
							"value": "100000,200000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Site to Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Has property dataObjects\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"dataObjects\")\r",
							"})\r",
							"pm.test(\"Has correct site name: \" + jsonData.response.dataObjects.name, function () {\r",
							"        pm.expect(jsonData.response.dataObjects.name).to.eql(\"New Site to delete\")\r",
							"})\r",
							"\r",
							"// needed for a later test\r",
							"pm.collectionVariables.set(\"newSiteToDelete\", jsonData.response.dataObjects.id)\r",
							"\r",
							"var createdSiteIds = new Array()\r",
							"createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"if (0 === createdSiteIds.length){\r",
							"    console.log(\"Creating new array\")\r",
							"    createdSiteIds = new Array()\r",
							"} else {\r",
							"    createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"}\r",
							"createdSiteIds.push(jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"createdSiteIds\",  JSON.stringify(createdSiteIds))\r",
							"console.log(\"Created Site id's = \" + pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"pm.collectionVariables.set(\"updateSiteId\",  JSON.stringify(jsonData.response.dataObjects.id))\r",
							"console.log(pm.collectionVariables.get(\"updateSiteId\"))\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"site\": {\r\n        \"name\": \"New Site to delete\",\r\n        \"description\": \"This is site is being used for deletion testing\",\r\n        \"timeZoneId\": \"America/Kentucky/Monticello\",\r\n        \"shiftStartTime\": \"00:00\"\r\n    }\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites",
					"host": [
						"{{baseURL}}sites"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Multiple Partial success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage_0 = \"Site with id 100000 cannot be found.\"\r",
							"const errorMessage_1 = \"Site with id 200000 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Has correct error message: \", function () {\r",
							"    pm.expect(jsonData.response.errors[0].msg).to.eql(\"Site with id 100000 cannot be found.\") \r",
							"    pm.expect(jsonData.response.errors[1].msg).to.eql(\"Site with id 200000 cannot be found.\") \r",
							"})\r",
							"success = \"Site \" + pm.collectionVariables.get(\"newSiteToDelete\") + \" was deleted.\"\r",
							"pm.test(\"Has correct success message: \", function () {\r",
							"    pm.expect(jsonData.response.success.msg).to.eql(success) \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}sites?ids=100000,200000,{{newSiteToDelete}}",
					"host": [
						"{{baseURL}}sites"
					],
					"query": [
						{
							"key": "ids",
							"value": "100000,200000,{{newSiteToDelete}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Clean up after yourself",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Cleanup after yourself\")\r",
							"if (pm.collectionVariables.get(\"createdSiteIds\")) {\r",
							"\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"\r",
							"    pm.test(\"Clear Variables\", function () {\r",
							"        console.log(\"Clearing variables\")\r",
							"        pm.collectionVariables.set(\"sitesToDelete\", \"\")\r",
							"        pm.collectionVariables.set(\"createdSiteIds\",  new Array())\r",
							"    })\r",
							"}\r",
							"console.log(\"Exiting Cleanup after yourself\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Delete sites that were created when running this collection\")\r",
							"\r",
							"if (pm.collectionVariables.get(\"createdSiteIds\")) {\r",
							"    createdSiteIds = pm.collectionVariables.get(\"createdSiteIds\")\r",
							"    if (0 != createdSiteIds.length) {\r",
							"        createdSiteIds = JSON.parse(pm.collectionVariables.get(\"createdSiteIds\"))\r",
							"        console.log(\"Deleting created sites \" + createdSiteIds)\r",
							"        sitesToDelete = \"\"\r",
							"        for (let i = 0; i < createdSiteIds.length; i++) {\r",
							"        sitesToDelete = sitesToDelete + createdSiteIds[i]\r",
							"        if (i != createdSiteIds.length -1)\r",
							"            sitesToDelete = sitesToDelete + \",\"\r",
							"        }\r",
							"        console.log (\"Sites to Delete: \" + sitesToDelete)\r",
							"        pm.collectionVariables.set(\"sitesToDelete\",  sitesToDelete)\r",
							"    }\r",
							"} else {\r",
							"    console.log(\"Creating site id array\")\r",
							"    pm.collectionVariables.set(\"createdSiteIds\", new Array())\r",
							"}\r",
							"console.log(\"Exiting Clean up after yourself\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}sites?ids={{sitesToDelete}}",
					"host": [
						"{{baseURL}}sites"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{sitesToDelete}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Clean up Created Sites Array",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}sites",
							"host": [
								"{{baseURL}}sites"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "raw",
					"header": [
						{
							"key": "Accept",
							"value": "*/*"
						},
						{
							"key": "accept-encoding",
							"value": "gzip, deflate, br"
						},
						{
							"key": "connection",
							"value": "keep-alive"
						},
						{
							"key": "host",
							"value": "localhost:80"
						},
						{
							"key": "postman-token",
							"value": "40b9e6ff-3c92-4c8e-8ab8-36c2dc9381b3"
						},
						{
							"key": "user-agent",
							"value": "PostmanRuntime/7.32.2"
						},
						{
							"key": "WWW-Authenticate",
							"value": "Basic realm=realm"
						},
						{
							"key": "Content-Type",
							"value": ";charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Jun 2023 17:38:11 GMT"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Fletch One Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var id = -3\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Fletch One Role', function () {\r",
							"    pm.expect(jsonData.response.dataObjects.id).eql(id)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "",
						"value": "",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role/-3",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						"-3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch One Role InvalidId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 0 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test('Fetch One Role InvalidId', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role/0",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch One Role Non Numeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 100 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Fetch One Role Non Numeric ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role/100",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch One Role Not Exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 100 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Fetch One Role Not Exists, function\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role/100",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						"100"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleName\", \"Tester\" + number)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(pm.collectionVariables.get(\"roleName\"))\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"roleID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role Existing Role",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage= \"A role named \" + pm.collectionVariables.get(\"roleName\") + \" already exists.\"\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role Existing Role\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Change Name & Description Unexisiting Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 0 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"\r",
							"pm.test('Update Role Change Name & Description Unexisiting Role', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\" : 0,\r\n    \"name\": \"My Unexisting Role\",\r\n    \"description\": \"My new updated role\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Change Name missing Role ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"\r",
							"pm.test('Update Role Change Name missing Role ID', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": \"Missing Role ID\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Change Name & Description",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const nameResponse = pm.collectionVariables.get(\"roleNameUpdated\")\r",
							"const descriptionMessage = \"My new updated role\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Update Role Change Name & Description', function () {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(nameResponse)\r",
							"    pm.expect(jsonData.response.dataObjects.description).eql(descriptionMessage)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleNameUpdated\", \"QA\" + number)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\" : {{roleID}},\r\n    \"name\": {{roleNameUpdated}},\r\n    \"description\": \"My new updated role\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Change Name with an existing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"A Role with name Administrator already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"pm.test(\"Has property errors\", function () {\r",
							"    pm.expect(jsonData.response).to.have.property(\"errors\")\r",
							"})\r",
							"pm.test(\"Has correct error message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\" : {{roleID}},\r\n    \"name\": \"Administrator\",\r\n    \"description\": \"My new updated role\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Add Feature",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const featuresID = [-3200, -3104, -2603]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Role Add Feature\", function () {\r",
							"    for( let i = 0 ; i < featuresID.length ; i++) {\r",
							"        pm.expect(jsonData.response.dataObjects.features[i][\"id\"]).oneOf(featuresID)\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\" : {{roleID}},\r\n    \"name\": {{roleNameUpdated}},\r\n    \"features\": [\r\n        {\r\n         \"id\": -3200\r\n        },\r\n        {\r\n          \"id\": -3104\r\n        },\r\n        {\r\n          \"id\": -2603\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role add Invalid Feature",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errrorMessage = \"Feature:id property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"\r",
							"pm.test('Update Role Change Name with an existing', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errrorMessage)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\" : {{roleID}},\r\n    \"name\": {{roleNameUpdated}},\r\n    \"features\": [\r\n        {\r\n         \"id\": -3200\r\n        },\r\n        {\r\n          \"id\": \"a\"\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Remove Feature",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const nonFeatureID = -2603\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Role Remove Feature\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects.features.id).not.eql(nonFeatureID)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n      \"id\" : {{roleID}},\r\n    \"name\": {{roleNameUpdated}},\r\n    \"features\": [\r\n        {\r\n         \"id\": -3200\r\n        },\r\n        {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role Remove All Features",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Role Remove All Features\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects).not.have.property(\"features\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n      \"id\" : {{roleID}},\r\n    \"name\": {{roleNameUpdated}},\r\n    \"features\": [\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Role NoNumeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"UpdateRole NoNumeric ID\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"id\": \"a\",\r\n    \"name\": \"{{roleNameUpdated}}\",\r\n    \"description\": \"My new updated role\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role?id=bad&",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "id",
							"value": "bad"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete one Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var Role_ID = pm.collectionVariables.get(\"roleID\")\r",
							"const deleteMessage = \"Role \" + Role_ID + \" was deleted.\" \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Delete one Role\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(deleteMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}admin/role?ids={{roleID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{roleID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role without Features",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role must contain at least one feature.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role without Features\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role with multiple errors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage= [\"name property cannot be null or empty.\",\r",
							"        \"Role must contain at least one feature.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role with multiple errors\", function() {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role with invalid feature ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Feature with id 1234 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role with invalid feature ID\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": \"Role with Invalid Feature\",\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": 1234\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role with non Numeric feature ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Feature:id property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role with non Numeric feature ID\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": \"a\"\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role Missing Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"name property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Role Missing Name\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role/?id=12",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessages = [\"name property cannot be null or empty.\",\r",
							"                      \"Role must contain at least one feature.\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Create Empty\", function () {\r",
							"    for (let i = 0 ; i < errorMessages.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessages[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role/?id=12",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role (Multiple I)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleName\", \"Tester\" + number)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify New Role Created\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(pm.collectionVariables.get(\"roleName\"))\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"roleID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role (Multiple II)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleNameUpdated\", \"QA\" + number)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify New Role Created\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(pm.collectionVariables.get(\"roleNameUpdated\"))\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"newRoleID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleNameUpdated}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Multiple Roles with Errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var RoleID1 = pm.collectionVariables.get(\"roleID\")\r",
							"var RoleID2 = pm.collectionVariables.get(\"newRoleID\")\r",
							"const errorMessage = [\"id property is not numeric: bad\",\r",
							"    \"id property is not numeric: anotherbad\",\r",
							"    \"Role with id 140000 cannot be found.\"]\r",
							"const responseMessage = [RoleID1, RoleID2]\r",
							"\r",
							" \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Validate Delete Response with multiple Errors', function () {\r",
							"    for(let i = 0 ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"    for(let j = 0 ; j < responseMessage ; j++) {\r",
							"        pm.expect(jsonData.response.success[j][\"msg\"]).eql(responseMessage[j])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role?ids={{roleID}},bad,{{newRoleID}},anotherbad,140000",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{roleID}},bad,{{newRoleID}},anotherbad,140000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fletch Deleted Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var RoleID = pm.collectionVariables.get(\"roleID\")\r",
							"const errorMessage = \"Role with id \" + RoleID + \" cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test('Verify Error Message to get Role Deleted', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "",
						"value": "",
						"type": "default",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role/{{roleID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role",
						"{{roleID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role for User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleNameUpdated\", \"QA\" + number)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify New Role Created\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(pm.collectionVariables.get(\"roleNameUpdated\"))\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"newRoleID\", jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"roleNameUpdated\", jsonData.response.dataObjects.name)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleNameUpdated}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"emailAddress\", \"QA\" + number + \"@honeywell.com\")\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"userID\", jsonData.response.dataObjects.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n        \"emailAddress\": {{emailAddress}},\r\n        \"name\": \"User for Role\",\r\n        \"password\": \"Test12345!\",\r\n        \"roles\": {\r\n            \"id\": {{newRoleID}},\r\n            \"name\": {{roleNameUpdated}}\r\n        },\r\n        \"enabled\": false,\r\n        \"notes\": \"\",\r\n        \"lastLoginTime\": \"2023-03-23T14:29:16.195Z\",\r\n        \"allSitesAccess\": true\r\n    }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/user",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Role in use",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Unable to delete role. It is referenced elsewhere in the system.\"\r",
							"\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message to delete Role Already in use\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role?ids={{newRoleID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{newRoleID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Administrator Role",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"You are not allowed to delete the Administrator role.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate IDs error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role?ids=-1",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Role Missing ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 00\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate IDs error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role?ids=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Role non Numeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: a\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate ID Error\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role?ids=a",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Role Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Role with id 0 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate ID Error\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role?ids=0",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/user?ids={{userID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Role (Multiple III)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.collectionVariables.set(\"roleName\", \"Tester\" + number)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var number = Math.random()\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify New Role Created\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.name).eql(pm.collectionVariables.get(\"roleName\"))\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"roleID\", jsonData.response.dataObjects.id)\r",
							"pm.collectionVariables.set(\"roleName\", \"Tester\" + number)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"role\": {\r\n    \"name\": {{roleName}},\r\n    \"description\": \"My new role\",\r\n    \"features\": [\r\n         {\r\n          \"id\": -3200\r\n         },\r\n         {\r\n          \"id\": -3104\r\n        }\r\n    ]\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/role",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Multiple Roles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const successMessage = [\"Role \" + pm.collectionVariables.get(\"roleID\") + \" was deleted.\",\r",
							"                        \"Role \" + pm.collectionVariables.get(\"newRoleID\") + \" was deleted.\"]\r",
							"\r",
							" \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Validate Delete Multiple Roles', function () {\r",
							"    for(let i = 0 ; i < successMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.success[i][\"msg\"]).eql(successMessage[i])\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain",
						"type": "default",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/role?ids={{roleID}},{{newRoleID}}",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"role"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{roleID}},{{newRoleID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run a Job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var response = \"A Job with id 6 started successfully.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Validate Run a Job', function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(response)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=6",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run Job with Mulptiple ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Job with id 333 cannot be found.\"\r",
							"const Job_ID = [2, 1]\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Multiple Job run with error\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"    for(let i = 0 ; i < Job_ID.length ; i++) {\r",
							"        const responseMessage = \"A Job with id \" + Job_ID[i] + \" started successfully.\"\r",
							"        pm.expect(jsonData.response.success[i][\"msg\"]).eql(responseMessage)\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=2,333,1",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": "2,333,1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run a Job already Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var response = \"A job with id 6 is already running.\"\r",
							"\r",
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test('Run a Job already Running', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(response)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=6",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": "6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run Job Missing ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"ids property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Validate Job Error Message', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run Job Not Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Job with id 27 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Validate Job Error Message', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=27",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Run Job NonNumeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property is not numeric: NonNumeric\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Validate Job Error Message', function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/schedule/run?ids=NonNumeric",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule",
						"run"
					],
					"query": [
						{
							"key": "ids",
							"value": "NonNumeric"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job disable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job disable\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : 5,\r\n    \"enabled\" : false \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job enable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job enable\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : 5,\r\n    \"enabled\" : true\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Set Interval Tieme to Zero Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"intervalTime cannot be equal to zero.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Set Interval Tieme to Zero Error\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"intervalTime\" : \"00:00:00\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Sch Type Interval Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"You must update at least one property.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Sch Type Interval Errorr\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"scheduleType\" : \"INTERVALS\"\r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Sch Type Interval Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const scheduleType = \"DAILY\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Sch Type Interval Empty\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects.scheduleType).eql(scheduleType)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"scheduleType\" : \"\",\r\n    \"dailyTime\" : \"01:00:00\" \r\n }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Set Interval Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const objectTye = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Set Interval Time\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(objectTye)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n      \"intervalTime\" : \"01:00:00\",\r\n      \"id\" : \"5\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Set Interval Time Bad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid format for property dailyTime  Must be 00:00:00.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message when tries to disable the job\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n      \"id\" : 5,\r\n      \"intervalTime\" : \"100:60:60\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Sch Type Interval",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Sch Type Interval\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"scheduleType\" : \"INTERVAL\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Sch Type Daily",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Sch Type Daily\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"scheduleType\" : \"DAILY\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Set Daily Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Set Daily Time\", function() {\r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"dailyTime\" : \"12:00:00\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Daily Time Bad Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid format for property dailyTime  Must be 00:00:00.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Daily Time Bad Format\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\", \r\n    \"dailyTime\" : \"00:00\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Daily Time No Leading Zero",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid format for property dailyTime  Must be 00:00:00.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Daily Time No Leading Zero\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\", \r\n    \"dailyTime\" : \"00:00\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Set Daily Time Bad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = [\"hours must be between 0 and 23\",\r",
							"                     \"minutes must be between 0 and 59\",\r",
							"                     \"seconds must be between 0 and 59\"]\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Set Daily Time Bad\", function () {\r",
							"    for (let i ; i < errorMessage.length ; i++) {\r",
							"        pm.expect(jsonData.response.errors[i][\"msg\"]).eql(errorMessage[i])\r",
							"    }\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : \"5\",\r\n    \"dailyTime\" : \"24:60:60\"\r\n }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Nothing to Change",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"You must update at least one property.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Nothing to Change\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\": \"5\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Empty ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Update Job Empty ID\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\": \"\",\r\n    \"enabled\" : false\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job No Numeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"id property cannot be null or empty.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Job No Numeric ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n      \"id\" : \"Non Numeric\",\r\n      \"enabled\" : \"true\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Job Unknown ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Job with id 1,000 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Job Unknown ID\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"job\": {\r\n    \"id\" : 1000,\r\n    \"enabled\" : \"true\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/schedule",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fletch Logs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const objectType = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Fletch Log\", function () {\r",
							"    pm.expect(jsonData.response.dataObjects[0]).to.have.property(objectType)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log"
					]
				}
			},
			"response": []
		},
		{
			"name": "Export VoiceConsole.log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/export?filename=VoiceConsole.log",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"export"
					],
					"query": [
						{
							"key": "filename",
							"value": "VoiceConsole.log"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Export VoiceConsole.err",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/export?filename=VoiceConsole.err",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"export"
					],
					"query": [
						{
							"key": "filename",
							"value": "VoiceConsole.err"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Export Logs wrong file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Could not find source file VoiceConsoles.log.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Export Logs wrong file\", function() {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/log/export?filename=VoiceConsoles.log",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"log",
						"export"
					],
					"query": [
						{
							"key": "filename",
							"value": "VoiceConsoles.log"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchNotification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const filterObject = pm.environment.get(\"filterProperty\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.dataObjects).to.have.property(filterObject)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/847",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"847"
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchNotificationNotNumeric",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var notNumeric = pm.environment.get(\"limitInvalid\")\r",
							"const errorMessage = \"id property is not numeric: invalid\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/invalid?=",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"invalid"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fetchNotificationNotExist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var Notification = pm.environment.get(\"siteNotFound\")\r",
							"const errorMessage = \"Notification with id -5 cannot be found.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/-5",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"-5"
					]
				}
			},
			"response": []
		},
		{
			"name": "addNotification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const successMessage = \"Critical notification created successfully.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							" pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Success Message\", function () {\r",
							"    pm.expect(jsonData.response.success.msg).eql(successMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}admin/notifications/-1/addTest",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"-1",
						"addTest"
					]
				}
			},
			"response": []
		},
		{
			"name": "addNotificationInvalidSite",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid Site ID\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							" pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)    \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/-31/addTest",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"-31",
						"addTest"
					]
				}
			},
			"response": []
		},
		{
			"name": "addNotificatiionAcknowledgedAlready",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMsg = \"has already been acknowledged.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.errors.msg).contain(errorMsg)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/ack?ids=919",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"ack"
					],
					"query": [
						{
							"key": "ids",
							"value": "919"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "addNotificatiionAcknowledged",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMsg = \"was acknowledged.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate success request\", function() { \r",
							"    pm.expect(jsonData.response.success.msg).contain(errorMsg)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/ack?ids=851",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"ack"
					],
					"query": [
						{
							"key": "ids",
							"value": "851"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Notificatiion_Acknowledged_more_than_one",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var limit = jsonData.response.success.length\r",
							"const successMessages = \"was acknowledged.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							" pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Success Messages\", function () {\r",
							"    for(let i = 0 ; i < limit ; i++) {\r",
							"        pm.expect(jsonData.response.success[i][\"msg\"]).contain(successMessages)\r",
							"    }   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/ack?ids=855,856,857",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"ack"
					],
					"query": [
						{
							"key": "ids",
							"value": "855,856,857"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Notificatiion_Acknowledged_Somesuccess_and_SomeAlreadyAck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const errorMessages = \"Notification not found in system. It may have been deleted already.\"\r",
							"var jsonData = pm.response.json()\r",
							"var code = pm.response.code\r",
							"\r",
							"if (code == \"500\")\r",
							"{\r",
							"    pm.test(\"Status code is 500\", function()\r",
							"    {\r",
							"        pm.response.to.have.status(500)   \r",
							"    })\r",
							"\r",
							"    pm.test(\"Validate Error Message\", function()\r",
							"    {\r",
							"        pm.expect(jsonData.response.errors.msg).eql(errorMessages)\r",
							"    })\r",
							"}\r",
							"\r",
							"else\r",
							"{    \r",
							"    pm.test(\"Status code is 200\", function () \r",
							"    {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"        var limitSuccess = jsonData.response.success.length\r",
							"        var limitErrors = jsonData.response.errors.length\r",
							"        const successMessage = \"was acknowledged.\" \r",
							"        const errorMessages2 = \"has already been acknowledged.\" \r",
							"\r",
							"        if (limitErrors > \"0\")\r",
							"        {\r",
							"            pm.test(\"Validate Many Error Message\", function()\r",
							"        {\r",
							"           for(let i = 0 ; i < limitErrors ; i++)\r",
							"           {\r",
							"               pm.expect(jsonData.response.errors[i][\"msg\"]).contain(errorMessages2)\r",
							"           } \r",
							"        })\r",
							"        }\r",
							"           \r",
							"        else\r",
							"        {\r",
							"            pm.test(\"Validate Error Message\", function()\r",
							"            {\r",
							"            pm.expect(jsonData.response.errors.msg).contain(errorMessages2)\r",
							"            })\r",
							"        }\r",
							"                \r",
							"        if (limitSuccess > \"0\")\r",
							"        { \r",
							"             pm.test(\"Validate Many Success Messages\", function ()\r",
							"        {\r",
							"            for(let i = 0 ; i < limitSuccess ; i++)\r",
							"            {\r",
							"                pm.expect(jsonData.response.success[i][\"msg\"]).contain(successMessage)\r",
							"            }\r",
							"        })\r",
							"        }  \r",
							"\r",
							"        else\r",
							"        {\r",
							"             pm.test(\"Validate Success Messages\", function ()\r",
							"        {\r",
							"            pm.expect(jsonData.response.success.msg).contain(successMessage)\r",
							"        })\r",
							"        }\r",
							"           \r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{baseURL}}admin/notifications/ack?ids=918,919,1006",
					"host": [
						"{{baseURL}}admin"
					],
					"path": [
						"notifications",
						"ack"
					],
					"query": [
						{
							"key": "ids",
							"value": "918,919,1006"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Feltch Operator Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}operatorteams?site=24",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move Operator Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{ \r\n        \"teams\":[13], \r\n        \"currentSite\":\"24\", \r\n        \"destinationSite\":\"4\", \r\n        \"removeFromOrigin\":\"true\" \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/movetosite",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"movetosite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Move All Operators Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{  \r\n        \"currentSite\":\"4\", \r\n        \"destinationSite\":\"24\", \r\n        \"removeFromOrigin\":\"true\" \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/movealltosite",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"movealltosite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Move All Operators Teams Keep in site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{  \r\n        \"currentSite\":\"24\", \r\n        \"destinationSite\":\"4\", \r\n        \"removeFromOrigin\":\"false\" \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/movealltosite",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"movealltosite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Move unexisted Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"There are no Operator Teams to move or add.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{  \r\n        \"currentSite\":\"29\", \r\n        \"destinationSite\":\"24\", \r\n        \"removeFromOrigin\":\"true\" \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/movealltosite",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"movealltosite"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Operator from Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator not found in the operator team.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{ \r\n        \"id\":\"13\", \r\n        \"members\":[\"2693\"] \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/removeoperator",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"removeoperator"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Invalid Operator from Teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator not found in the operator team.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{ \r\n        \"id\":\"13\", \r\n        \"members\":[\"1234\"] \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/removeoperator",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"removeoperator"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove noNumeric Operator from Team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid Operator id.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{ \r\n        \"id\":\"13\", \r\n        \"members\":[\"ABC\"] \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/removeoperator",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"removeoperator"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove Operator from Invalid Team",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator Team Id : Field must be a number.\"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400)\r",
							"})\r",
							"\r",
							"pm.test(\"Verify Error Message\", function () {\r",
							"    pm.expect(jsonData.response.errors.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operatorteam\":{ \r\n        \"id\":\"ABC\", \r\n        \"members\":[\"2694\"] \r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operatorteams/removeoperator",
					"host": [
						"{{baseURL}}operatorteams"
					],
					"path": [
						"removeoperator"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fletch All Operators for a Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}operators/site?site=24",
					"host": [
						"{{baseURL}}operators"
					],
					"path": [
						"site"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Exist Operator Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator Name Tester already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate existing Operator ID\", function () {\r",
							"    pm.expect(jsonData.error.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operator\": {\r\n        \"name\": \"Tester\",\r\n        \"operatorID\": \"Tester\",\r\n        \"spokenName\": \"Tester\",\r\n        \"pin\": 123456,\r\n        \"notes\": \"\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operators?site=24",
					"host": [
						"{{baseURL}}operators"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Exist Operator ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator ID Tester already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate existing Operator ID\", function () {\r",
							"    pm.expect(jsonData.error.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operator\": {\r\n        \"name\": {{operatorName}},\r\n        \"operatorID\": \"Tester\",\r\n        \"spokenName\": \"Tester\",\r\n        \"pin\": 123456,\r\n        \"notes\": \"\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operators?site=24",
					"host": [
						"{{baseURL}}operators"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create  Operator in Invalid Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Invalid Site ID\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate create Operator into invalid site\", function () {\r",
							"    pm.expect(jsonData.error.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operator\": {\r\n        \"name\": {{operatorName}},\r\n        \"operatorID\": \"Tester\",\r\n        \"spokenName\": \"Tester\",\r\n        \"pin\": 123456,\r\n        \"notes\": \"\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operators?site=2",
					"host": [
						"{{baseURL}}operators"
					],
					"query": [
						{
							"key": "site",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Operator with exisiting PIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"const errorMessage = \"Operator Number 123456 already exists.\"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate create new Operator w Exisiting PIN\", function () {\r",
							"    pm.expect(jsonData.error.msg).eql(errorMessage)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.environment.set(\"operatorName\", \"test\" + number)\r",
							"pm.environment.set(\"operatorID\", \"test\" + number)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operator\": {\r\n        \"name\": {{operatorName}},\r\n        \"operatorID\": {{operatorID}},\r\n        \"spokenName\": {{operatorName}},\r\n        \"pin\": 123456,\r\n        \"notes\": \"This is a bunch of note for the operator  {{operatorName}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operators?site=24",
					"host": [
						"{{baseURL}}operators"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Operator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var operatorName = pm.environment.get(\"operatorName\")\r",
							"const notesResponse = \"This is a bunch of notes for the operator \" + operatorName\r",
							"var number = Math.random()\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Validate create new Operator\", function () {\r",
							"    pm.expect(jsonData.operator.notes).eql(notesResponse)\r",
							"})\r",
							"\r",
							"var operatorId = jsonData.operator.id\r",
							"pm.environment.set(\"operatorIDResponse\", operatorId)\r",
							"pm.environment.set(\"operatorName\", \"test\" + number)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var number = Math.random()\r",
							"\r",
							"pm.environment.set(\"operatorName\", \"test\" + number)\r",
							"pm.environment.set(\"operatorID\", \"test\" + number)\r",
							"pm.environment.set(\"pinNumber\", \"test\" + number)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operator\": {\r\n        \"name\": {{operatorName}},\r\n        \"operatorID\": {{operatorID}},\r\n        \"spokenName\": {{operatorName}},\r\n        \"pin\": {{pinNumber}},\r\n        \"notes\": \"This is a bunch of notes for the operator {{operatorName}}\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}operators?site=24",
					"host": [
						"{{baseURL}}operators"
					],
					"query": [
						{
							"key": "site",
							"value": "24"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "updateSiteId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "sitesToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "serverCertificateFileName",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdSiteIds",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingNameTest",
			"value": "",
			"type": "string"
		},
		{
			"key": "newSiteToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleName",
			"value": "Tester",
			"type": "string"
		},
		{
			"key": "roleNameUpdated",
			"value": "QA",
			"type": "string"
		},
		{
			"key": "roleID",
			"value": "",
			"type": "string"
		},
		{
			"key": "newRoleID",
			"value": "",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "tester",
			"type": "string"
		},
		{
			"key": "emailAddress",
			"value": "",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "string"
		},
		{
			"key": "newUserIDs",
			"value": "",
			"type": "string"
		}
	]
}
